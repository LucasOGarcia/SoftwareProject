package com.mycompany.project;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author lucas
 */
public class RolePlay extends javax.swing.JFrame {

    /**
     * Creates new form RolePlay2
     */
    public RolePlay() {
        initComponents();
        initPage();
    }
    
    public RolePlay(List<RolePlayTopic> newMatchingSubTopics) {
        setPreviousSubTopics(newMatchingSubTopics);
        initComponents();
        initPage();
    }
    
    RolePlayTopic currentRolePlay;
    List<RolePlayTopic> previousSubTopics;
    List<String> buttonsVocabs;
    List<String> radioVocabs;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        logoIcon = new javax.swing.JLabel();
        homeButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        TextArea = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        completeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        RadioButton3 = new javax.swing.JRadioButton();
        RadioButton8 = new javax.swing.JRadioButton();
        RadioButton6 = new javax.swing.JRadioButton();
        RadioButton2 = new javax.swing.JRadioButton();
        RadioButton4 = new javax.swing.JRadioButton();
        RadioButton5 = new javax.swing.JRadioButton();
        RadioButton7 = new javax.swing.JRadioButton();
        RadioButton1 = new javax.swing.JRadioButton();
        Button1 = new javax.swing.JButton();
        Button2 = new javax.swing.JButton();
        Button3 = new javax.swing.JButton();
        Button4 = new javax.swing.JButton();
        Button5 = new javax.swing.JButton();
        Button6 = new javax.swing.JButton();
        Button7 = new javax.swing.JButton();
        Button8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logoIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo64x.png"))); // NOI18N

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home_icon.png"))); // NOI18N
        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jTextField5.setEditable(false);
        jTextField5.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5.setText("Key Vocabulary:");
        jTextField5.setFocusable(false);
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        TextArea.setBackground(new java.awt.Color(242, 245, 250));
        TextArea.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TextArea.setText("jLabel3");
        TextArea.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        TextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(125, 125, 125)));
        TextArea.setMaximumSize(new java.awt.Dimension(329, 251));
        TextArea.setMinimumSize(new java.awt.Dimension(329, 251));
        TextArea.setPreferredSize(new java.awt.Dimension(329, 251));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Role Play: ");

        completeButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        completeButton.setText("Complete");
        completeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(242, 245, 250));

        RadioButton3.setBackground(new java.awt.Color(231, 239, 255));
        RadioButton3.setText("jRadioButton3");
        RadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton3ActionPerformed(evt);
            }
        });

        RadioButton8.setBackground(new java.awt.Color(231, 239, 255));
        RadioButton8.setText("jRadioButton8");
        RadioButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton8ActionPerformed(evt);
            }
        });

        RadioButton6.setBackground(new java.awt.Color(231, 239, 255));
        RadioButton6.setText("jRadioButton6");
        RadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton6ActionPerformed(evt);
            }
        });

        RadioButton2.setBackground(new java.awt.Color(231, 239, 255));
        RadioButton2.setText("jRadioButton2");
        RadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton2ActionPerformed(evt);
            }
        });

        RadioButton4.setBackground(new java.awt.Color(231, 239, 255));
        RadioButton4.setText("jRadioButton4");
        RadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton4ActionPerformed(evt);
            }
        });

        RadioButton5.setBackground(new java.awt.Color(231, 239, 255));
        RadioButton5.setText("jRadioButton5");
        RadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton5ActionPerformed(evt);
            }
        });

        RadioButton7.setBackground(new java.awt.Color(231, 239, 255));
        RadioButton7.setText("jRadioButton7");
        RadioButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton7ActionPerformed(evt);
            }
        });

        RadioButton1.setBackground(new java.awt.Color(231, 239, 255));
        RadioButton1.setText("jRadioButton1");
        RadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton1ActionPerformed(evt);
            }
        });

        Button1.setBackground(new java.awt.Color(231, 239, 255));
        Button1.setText("jButton1");
        Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);
            }
        });

        Button2.setBackground(new java.awt.Color(231, 239, 255));
        Button2.setText("jButton2");
        Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }
        });

        Button3.setBackground(new java.awt.Color(231, 239, 255));
        Button3.setText("jButton3");
        Button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button3ActionPerformed(evt);
            }
        });

        Button4.setBackground(new java.awt.Color(231, 239, 255));
        Button4.setText("jButton4");
        Button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button4ActionPerformed(evt);
            }
        });

        Button5.setBackground(new java.awt.Color(231, 239, 255));
        Button5.setText("jButton5");
        Button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button5ActionPerformed(evt);
            }
        });

        Button6.setBackground(new java.awt.Color(231, 239, 255));
        Button6.setText("jButton6");

        Button7.setBackground(new java.awt.Color(231, 239, 255));
        Button7.setText("jButton7");

        Button8.setBackground(new java.awt.Color(231, 239, 255));
        Button8.setText("jButton8");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RadioButton2)
                    .addComponent(RadioButton3)
                    .addComponent(RadioButton4)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(RadioButton5)
                        .addComponent(RadioButton6)
                        .addComponent(RadioButton7)
                        .addComponent(RadioButton8))
                    .addComponent(RadioButton1))
                .addGap(62, 62, 62)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Button1)
                    .addComponent(Button2)
                    .addComponent(Button3)
                    .addComponent(Button4)
                    .addComponent(Button5)
                    .addComponent(Button6)
                    .addComponent(Button7)
                    .addComponent(Button8))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Button1)
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Button2)
                                .addGap(18, 18, 18)
                                .addComponent(Button3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(Button4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Button5)
                                .addGap(18, 18, 18)
                                .addComponent(Button6)
                                .addGap(18, 18, 18)
                                .addComponent(Button7)
                                .addGap(18, 18, 18)
                                .addComponent(Button8))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RadioButton1)
                        .addGap(21, 21, 21)
                        .addComponent(RadioButton2)
                        .addGap(18, 18, 18)
                        .addComponent(RadioButton3)
                        .addGap(18, 18, 18)
                        .addComponent(RadioButton4)
                        .addGap(18, 18, 18)
                        .addComponent(RadioButton5)
                        .addGap(18, 18, 18)
                        .addComponent(RadioButton6)
                        .addGap(18, 18, 18)
                        .addComponent(RadioButton7)
                        .addGap(18, 18, 18)
                        .addComponent(RadioButton8)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(TextArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(logoIcon)
                                    .addGap(63, 63, 63)
                                    .addComponent(homeButton))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(backButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(completeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(homeButton)
                    .addComponent(logoIcon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(completeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Do you want to exit?" , "Yes", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(response==JOptionPane.YES_OPTION) {
            RolePlaySettings settings = new RolePlaySettings();
            RolePlayManager.setRolePlaySettings(settings);
            ApplicationInfo.createHomePage();
            ApplicationInfo.getRolePlayPage().dispose();
        }
    }//GEN-LAST:event_homeButtonActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void RadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton3ActionPerformed
        // TODO add your handling code here:
        RadioButton3.setEnabled(false);
        Button3.setVisible(true);
        increaseVocabAssistCount();
        //int buttonIndex = 2;
    }//GEN-LAST:event_RadioButton3ActionPerformed

    private void RadioButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton8ActionPerformed
        // TODO add your handling code here:
        RadioButton8.setEnabled(false);
        Button8.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_RadioButton8ActionPerformed

    private void RadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton6ActionPerformed
        // TODO add your handling code here:
        RadioButton6.setEnabled(false);
        Button6.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_RadioButton6ActionPerformed

    private void RadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton2ActionPerformed
        RadioButton2.setEnabled(false);
        Button2.setVisible(true);
        increaseVocabAssistCount();

        //int buttonIndex = 1;
    }//GEN-LAST:event_RadioButton2ActionPerformed

    private void RadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton4ActionPerformed
        // TODO add your handling code here:
        RadioButton4.setEnabled(false);
        Button4.setVisible(true);
        increaseVocabAssistCount();

        //int buttonIndex = 3;
    }//GEN-LAST:event_RadioButton4ActionPerformed

    private void RadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton5ActionPerformed
        // TODO add your handling code here:
        RadioButton5.setEnabled(false);
        Button5.setVisible(true);
        increaseVocabAssistCount();
        //int buttonIndex = 4;
    }//GEN-LAST:event_RadioButton5ActionPerformed

    private void RadioButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton7ActionPerformed
        // TODO add your handling code here:
        RadioButton7.setEnabled(false);
        Button7.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_RadioButton7ActionPerformed

    private void RadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton1ActionPerformed
          RadioButton1.setEnabled(false);
        Button1.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_RadioButton1ActionPerformed

    private void Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button1ActionPerformed
        RadioButton1.setEnabled(false);
        Button1.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_Button1ActionPerformed

    private void Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button2ActionPerformed
        RadioButton2.setEnabled(false);
        Button2.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_Button2ActionPerformed

    private void Button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button3ActionPerformed
        RadioButton3.setEnabled(false);
        Button3.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_Button3ActionPerformed

    private void Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button4ActionPerformed
        RadioButton4.setEnabled(false);
        Button4.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_Button4ActionPerformed

    private void Button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button5ActionPerformed
        RadioButton5.setEnabled(false);
        Button5.setVisible(true);
        increaseVocabAssistCount();
    }//GEN-LAST:event_Button5ActionPerformed

    private void completeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeButtonActionPerformed
        // TODO add your handling code here:

        increaseRolePlayTopicCount();
        increaseRolePlayDifficultyCounter();
        increaseRolePlayRoleCounter();
        updateRolePlayProgress();
        lastRolePlayTimeStamp();
        ApplicationInfo.createHomePage();
        ApplicationInfo.getRolePlayPage().dispose();
    }//GEN-LAST:event_completeButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Do you want to exit?" , "Yes", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        if(response==JOptionPane.YES_OPTION) {
            RolePlaySettings settings = RolePlayManager.getRolePlaySettings();
            settings.setSubTopicType(null);
            RolePlayManager.setRolePlaySettings(settings);
            if (!previousSubTopics.isEmpty()) {
                ApplicationInfo.createSubTopicSelectionPage(previousSubTopics);
            }
            else{
                ApplicationInfo.createSubTopicSelectionPage();
            }
            ApplicationInfo.getRolePlayPage().dispose(); 
        } 
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RolePlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RolePlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RolePlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RolePlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RolePlay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button1;
    private javax.swing.JButton Button2;
    private javax.swing.JButton Button3;
    private javax.swing.JButton Button4;
    private javax.swing.JButton Button5;
    private javax.swing.JButton Button6;
    private javax.swing.JButton Button7;
    private javax.swing.JButton Button8;
    private javax.swing.JRadioButton RadioButton1;
    private javax.swing.JRadioButton RadioButton2;
    private javax.swing.JRadioButton RadioButton3;
    private javax.swing.JRadioButton RadioButton4;
    private javax.swing.JRadioButton RadioButton5;
    private javax.swing.JRadioButton RadioButton6;
    private javax.swing.JRadioButton RadioButton7;
    private javax.swing.JRadioButton RadioButton8;
    private javax.swing.JLabel TextArea;
    private javax.swing.JButton backButton;
    private javax.swing.JButton completeButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel logoIcon;
    // End of variables declaration//GEN-END:variables

    private void initPage() {
        setPageIcon(); 
        jTextField5.setFocusable(false);
        // add all radio buttons and labels to two seperate lists, do a for loop to disable all radio buttons and make the labels invisble and set their text to blank
        List<JRadioButton> radioButtons = new ArrayList();
        radioButtons.add(RadioButton1); 
        radioButtons.add(RadioButton2); 
        radioButtons.add(RadioButton3); 
        radioButtons.add(RadioButton4); 
        radioButtons.add(RadioButton5); 
        radioButtons.add(RadioButton6); 
        radioButtons.add(RadioButton7); 
        radioButtons.add(RadioButton8); 
        
        //to disable the radio butons:
        for (int i = 0; i < radioButtons.size(); i++) {
            radioButtons.get(i).setEnabled(false);
            radioButtons.get(i).setVisible(false);
        }
        
        List<JButton> buttons = new ArrayList();
        buttons.add(Button1);
        buttons.add(Button2);
        buttons.add(Button3);
        buttons.add(Button4);
        buttons.add(Button5);
        buttons.add(Button6);
        buttons.add(Button7);
        buttons.add(Button8);
        
        //to disable the butons:
        for (int i = 0; i < buttons.size(); i++) {
            buttons.get(i).setEnabled(false);
            buttons.get(i).setVisible(false);
        }
        
        if (RolePlayManager.getRolePlaySettings() != null && RolePlayManager.getRolePlaySettings().getTopicType() != null) {
            RolePlayTopic matchingRolePlay = new RolePlayTopic();
            List<RolePlayTopic> rolePlayList = new ArrayList();
            // check which difficulty the user has selected and get the list associated with that difficulty
            switch (RolePlayManager.getRolePlaySettings().getDifficulty()){
                case "A1":
                    rolePlayList = RolePlayManager.getTopicsA1();
                    break;
                case "A2":
                    rolePlayList = RolePlayManager.getTopicsA2();
                    break;
                case "B1":
                    rolePlayList = RolePlayManager.getTopicsB1();
                    break;
                case "B2":
                    rolePlayList = RolePlayManager.getTopicsB2();
                    break;
            }
            //get matching roleplays
            matchingRolePlay = getMatchingRolePlay(matchingRolePlay, rolePlayList);
            if (matchingRolePlay == null) {
                return;
            }
            //set global role play object
            currentRolePlay = matchingRolePlay;
            // extract key vocab
            if (RolePlayManager.getRolePlaySettings().getRole().equals("Teacher")) {
                buttonsVocabs = matchingRolePlay.personBVocabAssist;
                radioVocabs = matchingRolePlay.personBVocabEnglish;
            }
            
            else{
                buttonsVocabs = matchingRolePlay.personAVocabAssist;
                radioVocabs = matchingRolePlay.personAVocabEnglish;
            }
            
            // set keyvocab and enable buttons based on the amount of vocab words
            if (!buttonsVocabs.isEmpty()) {
                for (int i = 0; i < buttonsVocabs.size(); i++) {
                    radioButtons.get(i).setEnabled(true);
                    radioButtons.get(i).setVisible(true);
                    radioButtons.get(i).setText(radioVocabs.get(i));
                    //buttons.get(i).setVisible(true);
                    buttons.get(i).setText(buttonsVocabs.get(i));
                    /*if (buttonsVocabs.size() == 0) {
                        break;
                    }*/
                }
            }
            // assign role play text to scrollable panel within the page based if the user is student or teacher
            if (RolePlayManager.getRolePlaySettings().getRole().equals("Teacher")) {
                String personBText = matchingRolePlay.personBText;
                TextArea.setText(personBText);
                // to-do assign to panel/label
            }
            else{
                String personAText = matchingRolePlay.personAText;
                TextArea.setText(personAText);
                 // to-do assign to panel/label
            }
        }
    }
    
    private RolePlayTopic getMatchingRolePlay(RolePlayTopic matchingRolePlays, List<RolePlayTopic> rolePlayList){
        for (int i = 0; i < rolePlayList.size(); i++) {
            // check for roleplays that having a matching topic
            if (rolePlayList.get(i).topicType.equals(RolePlayManager.getRolePlaySettings().getTopicType())) {
                //check for roleplays that have a matching difficulty
                if (rolePlayList.get(i).difficulty.equals(RolePlayManager.getRolePlaySettings().getDifficulty())) {
                    //check for roleplays that have a matching sub-topic
                    if (rolePlayList.get(i).subTopicType.equals(RolePlayManager.getRolePlaySettings().getSubTopicType())) {
                        //check for roleplays that have a matching langauge
                        if (rolePlayList.get(i).language.equals(RolePlayManager.getRolePlaySettings().getLanguage())) {
                            matchingRolePlays = rolePlayList.get(i);
                        }
                    }
                }
            }
        }
        return matchingRolePlays;
    }
    
    private void setPreviousSubTopics(List<RolePlayTopic> newPreviousSubTopics) {
        this.previousSubTopics = newPreviousSubTopics;
    }

    // CRUD operations functions
    
    private void increaseVocabAssistCount() {
        if (RolePlayManager.getRolePlaySettings().getLanguage() == null) {
            return;
        }
        try {
            int newAssistCount  = JdbcCrud.getVocabAssistCount(ApplicationInfo.getUser().userEmail, RolePlayManager.getRolePlaySettings().getLanguage())+1;
            JdbcCrud.upateVocabAssistCount(newAssistCount, RolePlayManager.getRolePlaySettings().getLanguage());
        } catch (Exception ex) {
            Logger.getLogger(RolePlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void setPageIcon(){
        // set window icon for the JFrame
        if (ApplicationInfo.getPageIconName() != null) {
            String imageName = ApplicationInfo.getPageIconName();
            ImageIcon icon = new ImageIcon(getClass().getResource("/" + imageName + ".png"));
            this.setIconImage(icon.getImage());
        }
    }
    
    private void increaseRolePlayTopicCount() {
        if (RolePlayManager.getRolePlaySettings().getTopicType() == null){
            return;
        }
        if (RolePlayManager.getRolePlaySettings().getLanguage() == null) {
            return;
        }
        if (ApplicationInfo.getUser().userEmail == null) {
            return;
        }
        String userLanguage = RolePlayManager.getRolePlaySettings().getLanguage();
        String userEmail = ApplicationInfo.getUser().userEmail;
        Integer newCount;
        try{
            switch (RolePlayManager.getRolePlaySettings().getTopicType()) {
                case "Asking and giving directions":
                    newCount = JdbcCrud.getTopicDirectionsCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicDirectionsCount(newCount, userLanguage);
                    break;
                    
                case "Basic employment issues":
                    newCount = JdbcCrud.getTopicEmploymentCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicEmploymentCount(newCount, userLanguage);
                    break;
                    
                case "Cross-cultural experiences":
                    newCount = JdbcCrud.getTopicCulturalExperiencesCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicCulturalExperiencesCount(newCount, userLanguage);
                    break;
                    
                case "Exchanging personal information":
                    newCount = JdbcCrud.getTopicPersonalInfoCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicPersonalInfoCount(newCount, userLanguage);
                    break;
                    
                case "Going shopping and asking for prices":
                    newCount = JdbcCrud.getTopicShoppingCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicShoppingCount(newCount, userLanguage);
                    break;
                    
                case "Health":
                    newCount = JdbcCrud.getTopicHealthCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicHealthCount(newCount, userLanguage);
                    break;
                    
                case "Housing conditions":
                    newCount = JdbcCrud.getTopicHousingCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicHousingCount(newCount, userLanguage);
                    break;
                    
                case "Introductions":
                    newCount = JdbcCrud.getTopicIntroductionsCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicIntroductionsCount(newCount, userLanguage);
                    break;
                    
                case "Making Appointments":
                    newCount = JdbcCrud.getTopicAppointmentsCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicAppointmentsCount(newCount, userLanguage);
                    break;
                    
                case "Making invitations":
                    newCount = JdbcCrud.getTopicInvitationsCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicInvitationsCount(newCount, userLanguage);
                    break;
                    
                case "Making travel arrangements":
                    newCount = JdbcCrud.getTopicTravelCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicTravelCount(newCount, userLanguage);
                    break;
                    
                case "Ordering food and drink":
                    newCount = JdbcCrud.getTopicFoodAndDrinkCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicFoodAndDrinkCount(newCount, userLanguage);
                    break;
                    
                case "Socialising":
                    newCount = JdbcCrud.getTopicSocialisingCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicSocialisingCount(newCount, userLanguage);
                    break;
                    
                case "University life":
                    newCount = JdbcCrud.getTopicUniversityCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicUniversityCount(newCount, userLanguage);
                    break;
                    
                case "Weather":
                    newCount = JdbcCrud.getTopicWeatherCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicWeatherCount(newCount, userLanguage);
                    break;
                    
                case "Work life":
                    newCount = JdbcCrud.getTopicWorkCount(userEmail, userLanguage) +1;
                    JdbcCrud.upateTopicWorkCount(newCount, userLanguage);
                    break;
            }
        }
        catch (Exception ex) {
            Logger.getLogger(RolePlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void lastRolePlayTimeStamp() {
        
        try {
            JdbcCrud.setUserLastRolePlay(RolePlayManager.getRolePlaySettings().getLanguage());
        } catch (Exception ex) {
            Logger.getLogger(RolePlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void increaseRolePlayDifficultyCounter() {
        if (RolePlayManager.getRolePlaySettings() == null){
            return;
        }
        if (RolePlayManager.getRolePlaySettings().getLanguage() == null) {
            return;
        }
        if (ApplicationInfo.getUser().userEmail == null) {
            return;
        }
        String userLanguage = RolePlayManager.getRolePlaySettings().getLanguage();
        String userEmail = ApplicationInfo.getUser().userEmail;
        Integer newCount;
        
        try{
            switch (RolePlayManager.getRolePlaySettings().getDifficulty()){
                case "A1":
                    newCount = JdbcCrud.getRolePlayCompleteA1(userEmail, userLanguage) +1;
                    JdbcCrud.SetRolePlayCompleteA1(newCount, userLanguage);
                    break;
                    
                case "A2":
                    newCount = JdbcCrud.getRolePlayCompleteA2(userEmail, userLanguage) +1;
                    JdbcCrud.SetRolePlayCompleteA2(newCount, userLanguage);
                    break;
                    
                case "B1":
                    newCount = JdbcCrud.getRolePlayCompleteB1(userEmail, userLanguage) +1;
                    JdbcCrud.SetRolePlayCompleteB1(newCount, userLanguage);
                    break;
                    
                case "B2":
                    newCount = JdbcCrud.getRolePlayCompleteB2(userEmail, userLanguage) +1;
                    JdbcCrud.SetRolePlayCompleteB2(newCount, userLanguage);
                    break;
            }
        }
        catch (Exception ex) {
            Logger.getLogger(RolePlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void increaseRolePlayRoleCounter() {
        if (RolePlayManager.getRolePlaySettings() == null){
            return;
        }
        if (RolePlayManager.getRolePlaySettings().getLanguage() == null) {
            return;
        }
        if (ApplicationInfo.getUser().userEmail == null) {
            return;
        }
        String userLanguage = RolePlayManager.getRolePlaySettings().getLanguage();
        String userEmail = ApplicationInfo.getUser().userEmail;
        Integer newCount;
        
        try{
            switch (RolePlayManager.getRolePlaySettings().getRole()){
                case "Student":
                    newCount = JdbcCrud.getRolePlayStudent(userEmail, userLanguage) +1;
                    JdbcCrud.setRolePlayStudent(newCount, userLanguage);
                    break;
                    
                case "Teacher":
                    newCount = JdbcCrud.getRolePlayTeacher(userEmail, userLanguage) +1;
                    JdbcCrud.setRolePlayTeacher(newCount, userLanguage);
                    break;
            }
        }
        catch (Exception ex) {
            Logger.getLogger(RolePlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateRolePlayProgress() {
        if (currentRolePlay == null) {
            return;
        }
        String table = "progress_"+ currentRolePlay.language+ "_"+ currentRolePlay.difficulty+ "_"+ getTable();
        String column = "client_progress_"+currentRolePlay.subTopicKey;
        try {
            JdbcCrud.upateProgress(table, column);
        } catch (Exception ex) {
            Logger.getLogger(RolePlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String getTable() {
        String table = null;
        switch (currentRolePlay.topicType) {
            case "Asking and giving directions":
                table = "Directions";
                break;
                
            case "Basic employment issues":
                table = "Employment";
                break;
                
            case "Cross-cultural experiences":
                table = "Cultural_Experiences";
                break; 
                
            case "Exchanging personal information":
                table = "Personal_Info";
                break;
                
            case "Going shopping and asking for prices":
                table = "Shopping";
                break;
                
            case "Health":
                table = "Health";
                break;
                
            case "Housing conditions":
                table = "Housing";
                break;
                
            case "Introductions":
                table = "Introductions";
                break;
                
            case "Making Appointments":
                table = "Appointments";
                break;
                
            case "Making invitations":
                table = "Invitations";
                break;
                
            case "Making travel arrangements":
                table = "Travel";
                break;
                
            case "Ordering food and drink":
                table = "Food_Drink";
                break;
                
            case "Socialising":
                table = "Socialising";
                break;
                
            case "University life":
                table = "University";
                break;
                
            case "Weather":
                table = "Weather";
                break;
                
            case "Work life":
                table = "Work";
                break;
        }
        return table;
    }
}
