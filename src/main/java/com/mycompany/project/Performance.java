/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.project;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 *
 * @author Gabriel
 */
public class Performance extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Performance() {
        initComponents();
        
        ArrayList<String> names = new ArrayList<>();
        Connection con = null;
        try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String query = "SELECT client_email FROM client_Info WHERE client_account_type = 0";
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            while(rs.next()){
                String data = rs.getString(1);
                 emailComboBox.addItem(data);

            }               
            con.close();
            pst.close();
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        commonTopic = new javax.swing.JTextField();
        commonDiff = new javax.swing.JTextField();
        assistCount = new javax.swing.JTextField();
        bCount = new javax.swing.JTextField();
        aCount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        emailComboBox = new javax.swing.JComboBox<>();
        languageComboBox = new javax.swing.JComboBox<>();
        confirmButton = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel4.setText("Number of times Person A");

        jLabel5.setText("Number of times Person B");

        jLabel6.setText("Number of Assists");

        jLabel7.setText("Most Common Topic");

        jLabel8.setText("Most Common Difficulty");

        commonTopic.setEditable(false);

        commonDiff.setEditable(false);

        assistCount.setEditable(false);

        bCount.setEditable(false);

        aCount.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(commonTopic, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(commonDiff)
                    .addComponent(assistCount)
                    .addComponent(bCount)
                    .addComponent(aCount))
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(aCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(bCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(assistCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(commonDiff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(commonTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("PERFORMANCE");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo64x.png"))); // NOI18N

        emailComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Email" }));

        languageComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Spanish", "Italian", "German", "Portuguese", "Greek", "French" }));

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(emailComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(confirmButton)
                .addGap(153, 153, 153))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backButton)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(46, 46, 46)
                .addComponent(emailComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(confirmButton)
                .addGap(38, 38, 38)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:private void backtoHome(){
        ApplicationInfo.createHomePage(); 
        ApplicationInfo.getPerformancePage().dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        // TODO add your handling code here:
        
        
    //If language isnt set to spanish
        //set all text to null
        String selected_text = languageComboBox.getItemAt(languageComboBox.getSelectedIndex());
        if(!selected_text.equals("Spanish")){
        assistCount.setText("null");
        aCount.setText("null");
        bCount.setText("null");
        commonTopic.setText("null");
        commonDiff.setText("null");
        }else{
        commonDiff();
        setPersonCount();
        assistCount.setText(String.valueOf(assistCount()));
        commonTopic.setText(topicCount());
        
        
        }
        
    }//GEN-LAST:event_confirmButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Performance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Performance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Performance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Performance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Performance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aCount;
    private javax.swing.JTextField assistCount;
    private javax.swing.JTextField bCount;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField commonDiff;
    private javax.swing.JTextField commonTopic;
    private javax.swing.JButton confirmButton;
    private javax.swing.JComboBox<String> emailComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> languageComboBox;
    // End of variables declaration//GEN-END:variables

    private void commonDiff(){
        int a1 = total_A1();
        int a2 = total_A2();
        int b1 = total_B1();
        int b2 = total_B2();
        
        if(a1 > a2 && a1 > b1 && a1 > b2){
            commonDiff.setText(String.valueOf(a1));
        }
        else if(a2 > a1 && a2 > b1 && a2> b2){
            commonDiff.setText(String.valueOf(a2));
        }
        else if(b1 > a1 && b1 > a2 && b1 > b2){
            commonDiff.setText(String.valueOf(b1));
        }
        else if(b2 > a1 && b2 > a2 && b2 > b1){
            commonDiff.setText(String.valueOf(b2));
        }else{
            commonDiff.setText("null");
        }  
    }
    
    private void setPersonCount(){
        aCount.setText(String.valueOf(personACount()));
        bCount.setText(String.valueOf(personBCount()));
    }
    
    
private Integer total_A1(){
        Connection con = null;
        String selected_text = emailComboBox.getItemAt(emailComboBox.getSelectedIndex());
        try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String a1_query = "SELECT client_statistics_language_roleplay_complete_a1 FROM client_Statistics_Spanish WHERE client_email=?";
            PreparedStatement pst = con.prepareStatement(a1_query);
            pst.setString(1, selected_text);
            ResultSet rs = pst.executeQuery();
            Integer a1_2 = rs.getInt(1);
            con.close();
            return a1_2;
         }catch(Exception e){
               throw new IllegalStateException("Can't connect to the database, a1 count", e);}  
}


private Integer total_A2(){
    Connection con = null;
        String selected_text = emailComboBox.getItemAt(emailComboBox.getSelectedIndex());
        try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String a1_query = "SELECT client_statistics_language_roleplay_complete_a1 FROM client_Statistics_Spanish WHERE client_email=?";
            PreparedStatement pst = con.prepareStatement(a1_query);
            pst.setString(1, selected_text);
            ResultSet rs = pst.executeQuery();
            Integer a2_2 = rs.getInt(1);
            con.close();
            return a2_2;
         }catch(Exception e){
               throw new IllegalStateException("Can't connect to the database, a2 count", e);}
    
}

private Integer total_B1(){
        Connection con = null;
        String selected_text = emailComboBox.getItemAt(emailComboBox.getSelectedIndex());
        try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String b1_query = "SELECT client_statistics_language_roleplay_complete_a1 FROM client_Statistics_Spanish WHERE client_email=?";
            PreparedStatement pst = con.prepareStatement(b1_query);
            pst.setString(1, selected_text);
            ResultSet rs = pst.executeQuery();
            Integer b1_2 = rs.getInt(1);
            con.close();
            return b1_2;
         }catch(Exception e){
               throw new IllegalStateException("Can't connect to the database, b1 count", e);}
    
}

private Integer total_B2(){
        Connection con = null;
        String selected_text = emailComboBox.getItemAt(emailComboBox.getSelectedIndex());
        try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String b2_query = "SELECT client_statistics_language_roleplay_complete_a1 FROM client_Statistics_Spanish WHERE client_email=?";
            PreparedStatement pst = con.prepareStatement(b2_query);
            pst.setString(1, selected_text);
            ResultSet rs = pst.executeQuery();
            Integer b2_2 = rs.getInt(1);
            con.close();
            return b2_2;
         }catch(Exception e){
               throw new IllegalStateException("Can't connect to the database, b2 count", e);}
    
}

private Integer personACount(){
            Connection con = null;
        String selected_text = emailComboBox.getItemAt(emailComboBox.getSelectedIndex());
        try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String a_query = "SELECT client_statistics_language_roleplay_person_a FROM client_Statistics_Spanish WHERE client_email=?";
            PreparedStatement pst = con.prepareStatement(a_query);
            pst.setString(1, selected_text);
            ResultSet rs = pst.executeQuery();
            Integer b = rs.getInt(1);
            con.close();
            return b;
         }catch(Exception e){
               throw new IllegalStateException("Can't connect to the database, person a count", e);}
    
}

private Integer personBCount(){
        Connection con = null;
        String selected_text = emailComboBox.getItemAt(emailComboBox.getSelectedIndex());
        try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String b_query = "SELECT client_statistics_language_roleplay_person_b FROM client_Statistics_Spanish WHERE client_email=?";
            PreparedStatement pst = con.prepareStatement(b_query);
            pst.setString(1, selected_text);
            ResultSet rs = pst.executeQuery();
            Integer b = rs.getInt(1);
            con.close();
            return b;
         }catch(Exception e){
               throw new IllegalStateException("Can't connect to the database, person b count", e);}   
}

private Integer assistCount(){
    Connection con = null;
        String selected_text = emailComboBox.getItemAt(emailComboBox.getSelectedIndex());
        try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String b_query = "SELECT client_statistics_language_vocab_assist FROM client_Statistics_Spanish WHERE client_email=?";
            PreparedStatement pst = con.prepareStatement(b_query);
            pst.setString(1, selected_text);
            ResultSet rs = pst.executeQuery();
            Integer b = rs.getInt(1);
            con.close();
            return b;
         }catch(Exception e){
               throw new IllegalStateException("Can't connect to the database, assist count", e);}
}

private String topicCount(){
    Connection con = null;
    String selected_text = emailComboBox.getItemAt(emailComboBox.getSelectedIndex());


    try{
            ConnectDB connectDB = new ConnectDB();
            con = connectDB.getConnection();
            String topic_query = "SELECT client_statistics_topic_directions, client_statistics_topic_employment, client_statistics_topic_cultural_experiences"
                    + ",client_statistics_topic_personal_info, client_statistics_topic_shopping,client_statistics_topic_health, client_statistics_topic_housing, "
                    + "client_statistics_topic_introductions, client_statistics_topic_appointments, client_statistics_topic_invitations, client_statistics_topic_travel,"
                    + " client_statistics_topic_food_drink, client_statistics_topic_socialising, client_statistics_topic_university, client_statistics_topic_weather, "
                    + "client_statistics_topic_work FROM client_Statistics_Spanish WHERE client_email=?";
            PreparedStatement pst = con.prepareStatement(topic_query);
            pst.setString(1, selected_text);
            ResultSet rs = pst.executeQuery();
            String result = "";//set to most common topic
            
            
            
            
            
            int directions = rs.getInt(1); //get element + 1
            int employment = rs.getInt(2);
            int cultural = rs.getInt(3);
            int info = rs.getInt(4);
            int shopping = rs.getInt(5);
            int health = rs.getInt(6);
            int housing = rs.getInt(7);
            int introductions = rs.getInt(8);
            int appointments = rs.getInt(9);
            int invitations = rs.getInt(10);
            int travel = rs.getInt(11);
            int food_drink = rs.getInt(12);
            int socialise = rs.getInt(13);
            int university = rs.getInt(14);
            int weather = rs.getInt(15);
            int work = rs.getInt(16);
            
            
            
            if(directions > employment && directions > cultural && directions > info && directions > shopping && directions > health && directions > housing && directions > introductions
                    && directions > appointments && directions > invitations && directions > travel && directions > food_drink && directions > socialise && directions > university && directions
                    > weather && directions > work){
                result = "Directions";
            }
            else if(employment > directions && employment > cultural && employment > info && employment > shopping && employment > health && employment > housing && employment > introductions
                     && employment > appointments && employment > invitations && employment > travel && employment > food_drink && employment > socialise && employment > university && employment > weather
                     && employment > work){
                result = "Employement";
            }
            else if(cultural > directions && cultural > employment && cultural > info && cultural > shopping && cultural > health && cultural > housing && cultural > introductions && cultural > appointments
                     && cultural > invitations && cultural > travel && cultural > food_drink && cultural > socialise && cultural > university && cultural > weather && cultural > work){
             result = "Cultural Experiences";   
            }
            else if(info > directions && info > employment && info > cultural && info > shopping && info > health && info > housing && info > introductions && info > appointments
                     && info > invitations && info > travel && info > food_drink && info > socialise && info > university && info > weather && info > work){
             result = "Personal Information";   
            }
            else if(shopping > directions && shopping > employment && shopping > cultural && shopping > info && shopping > health && shopping > housing && shopping > introductions && shopping > appointments
                     && shopping > invitations && shopping > travel && shopping > food_drink && shopping > socialise && shopping > university && shopping > weather && shopping > work){
             result = "Shopping";   
            }
            else if(health > directions && health > employment && health > cultural && health > info && health > shopping && health > housing && health > introductions && health > appointments
                     && health > invitations && health > travel && health > food_drink && health > socialise && health > university && health > weather && health > work){
             result = "Health";   
            }
            else if(housing > directions && housing > employment && housing > cultural && housing > info && housing > shopping && housing > health && housing > introductions && housing > appointments
                     && housing > invitations && housing > travel && housing > food_drink && housing > socialise && housing > university && housing > weather && housing > work){
             result = "Housing";   
            }
            else if(introductions > directions && introductions > employment && introductions > cultural && introductions > info && introductions > shopping && introductions > health && introductions > housing && introductions > appointments
                     && introductions > invitations && introductions > travel && introductions > food_drink && introductions > socialise && introductions > university && introductions > weather && introductions > work){
             result = "Introductions";   
            }
             else if(appointments > directions && appointments > employment && appointments > cultural && appointments > info && appointments > shopping && appointments > health && appointments > housing && appointments > introductions
             && appointments > invitations && appointments > travel && appointments > food_drink && appointments > socialise && appointments > university && appointments > weather && appointments > work){
             result = "Appointments";   
            }
             else if(invitations > directions && invitations > employment && invitations > cultural && invitations > info && invitations > shopping && invitations > health && invitations > housing && invitations > introductions
             && invitations > appointments && invitations > travel && invitations > food_drink && invitations > socialise && invitations > university && invitations > weather && invitations > work){
             result = "Invitations";   
            }
            else if(travel > directions && travel > employment && travel > cultural && travel > info && travel > shopping && travel > health && travel > housing && travel > introductions
             && travel > appointments && travel > invitations && travel > food_drink && travel > socialise && travel > university && travel > weather && travel > work){
             result = "Travel";   
            }
            else if(food_drink > directions && food_drink > employment && food_drink > cultural && food_drink > info && food_drink > shopping && food_drink > health && food_drink > housing && food_drink > introductions
             && food_drink > appointments && food_drink > invitations && food_drink > travel && food_drink > socialise && food_drink > university && food_drink > weather && food_drink > work){
             result = "Food and Drink";   
            }
            else if(socialise > directions && socialise > employment && socialise > cultural && socialise > info && socialise > shopping && socialise > health && socialise > housing && socialise > introductions
             && socialise > appointments && socialise > invitations && socialise > travel && socialise > food_drink && socialise > university && socialise > weather && socialise > work){
             result = "Socialise";   
            }
            else if(university > directions && university > employment && university > cultural && university > info && university > shopping && university > health && university > housing && university > introductions
             && university > appointments && university > invitations && university > travel && university > food_drink && university > socialise && university > weather && university > work){
             result = "University";   
            }
            else if(weather > directions && weather > employment && weather > cultural && weather > info && weather > shopping && weather > health && weather > housing && weather > introductions
             && weather > appointments && weather > invitations && weather > travel && weather > food_drink && weather > socialise && weather > university && weather > work){
             result = "Weather";   
            }
            else if(work > directions && work > employment && work > cultural && work > info && work > shopping && work > health && work > housing && work > introductions
             && work > appointments && work > invitations && work > travel && work > food_drink && work > socialise && work > university && work > weather){
             result = "Work";   
            }else{
                //data is tied
                result="No data found";
            }

            con.close();
            return result;
         }catch(SQLException e){
               throw new IllegalStateException("Can't connect to the database, topics", e);}
    
}







}
